<!DOCTYPE html>
<html>
<head>
    <title>Dashboard</title>
    <link rel="stylesheet" href="/main.css">
    <link rel="stylesheet" href="/dashboardpage.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body class="assessment-page">
    <%- include('../utils/header') %>

    <div class="welcome-section">
        <h1>Welcome, <%= userName %>!</h1>
        <button onclick="location.href='/edit-profile'">Edit Profile</button>
    </div>

    <div class="completed-section">
        <h2 class="section-header" style="font-family: 'Yaelah';">You Have Completed These Activities</h2>
        <div id="completedActivities"></div>
    </div>

    <div class="achievements-section">
        <h2 class="section-header" style="font-family: 'Yaelah';">Achievements</h2>
        <div class="badges" id="achievements">
            <% achievements.forEach(achievement => { %>
                <div class="badge">
                    <img src="<%= achievement.badgeImage %>" alt="Completed <%= achievement.name %>">
                    <p>Completed <%= achievement.name %></p>
                </div>
            <% }) %>
        </div>
    </div>

    <div class="progress-section">
        <h2 class="section-header" style="font-family: 'Yaelah';">Games Progress</h2>
        <p class="click-to-go-text">Click on each game below to progress:</p>
        <div id="gamesProgress">
            <% if (games && games.length > 0) { %>
                <% games.forEach(function(game) { %>
                    <!-- Redirect each unfinished game to its respective game page -->
                    <a href="/games/play/<%= game.id %>" class="game-link">
                        <div class="game" data-game-id="<%= game.id %>" data-game-section="<%= game.section %>">
                            <div class="game-title"><%= game.title %></div>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" aria-valuenow="<%= game.progress_percentage %>" aria-valuemin="0" aria-valuemax="100">
                                    <%= game.progress_percentage %>%
                                </div>
                            </div>
                            <div class="game-details">
                                <div class="game-status">Elapsed Time: <%= game.elapsed_minutes %> minutes | Status: <%= game.progress_percentage >= 100 ? 'Completed' : game.progress_percentage.toFixed(2) + '% Completed' %></div>
                                <div class="game-message"><%= game.progress_message %></div>
                            </div>
                        </div>
                    </a>
                <% }); %>
            <% } else { %>
                <p>No games available.</p>
            <% } %>
        </div>
    </div>

    <div class="total-time-section">
        <div class="row">
            <div class="col-md-6">
                <h2 class="section-header" style="font-family: 'Yaelah';">Total Time Spent on Each Section</h2>
                <div class="section-time">
                    <p id="mind-time">Mind Games: 0 minutes</p>
                    <p id="relaxation-time">Relaxation Games: 0 minutes</p>
                    <p id="educational-time">Educational Games: 0 minutes</p>
                </div>
            </div>
            <div class="col-md-6">
                <div class="canvas-wrapper">
                    <canvas id="totalTimeChart" width="150" height="150"></canvas>
                </div>
            </div>
        </div>
    </div>

    <div class="goals-section">
        <h2 class="section-header" style="font-family: 'Yaelah';">My Goals</h2>
    
        <!-- Add more goals form -->
        <form action="/add-more-goals" method="post" class="add-more-goals-form mb-3">
            <input type="text" name="newGoal" placeholder="Enter new goal...">
            <button type="submit" class="add-goal-btn">Add Above</button>
        </form>
      
        <!-- Display the current goals in a column -->
        <% if (goalsText && goalsText.trim().length > 0) { %>
            <div class="goals-display mb-3">
                <p><strong>Current Goals:</strong></p>
                <ul>
                    <% const goalsArray = goalsText.split("\n"); %>
                    <% goalsArray.forEach((goal, index) => { %>
                        <li class="goal-item">
                            <span class="goal-text"><%= goal %></span>
                            <form action="/delete-goal" method="post" style="display:inline;">
                                <input type="hidden" name="goalIndex" value="<%= index %>">
                                <button type="submit" class="delete-goal-btn" title="Delete Goal">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </form>
                        </li>
                    <% }); %>
                </ul>
            </div>
        <% } else { %>
            <p>No goals set yet.</p>
        <% } %>
    </div>

    <%- include('../utils/footer') %>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            updateGameProgress();

            function updateGameProgress() {
                const games = document.querySelectorAll('.game');
                const completedActivities = document.getElementById('completedActivities');
                const achievementsSection = document.getElementById('achievements');
                const gamesProgress = document.getElementById('gamesProgress');
                const totalTimes = {
                    mind: 0,
                    relaxation: 0,
                    educational: 0
                };

                games.forEach((game, index) => {
                    const gameId = game.getAttribute('data-game-id');
                    const gameSection = game.getAttribute('data-game-section');
                    const userId = '<%= userName %>'; // Assuming userName is unique per user
                    const elapsedMinutes = parseFloat(localStorage.getItem(`elapsedMinutes_${gameId}_${userId}`)) || 0;
                    const roundedElapsedMinutes = elapsedMinutes.toFixed(2);
                    const progressPercentage = Math.min((elapsedMinutes / 15) * 100, 100);

                    // Add to total time
                    if (totalTimes[gameSection] !== undefined) {
                        totalTimes[gameSection] += elapsedMinutes;
                    }

                    const progressBar = game.querySelector('.progress-bar');
                    if (progressBar) {
                        progressBar.setAttribute('aria-valuenow', progressPercentage);
                        progressBar.style.width = `${progressPercentage}%`;
                        progressBar.textContent = `${progressPercentage.toFixed(2)}%`;

                        // Remove existing colour classes to set custom colour classes 
                        progressBar.classList.remove('progress-bar-low', 'progress-bar-medium', 'progress-bar-high', 'progress-bar-very-high', 'progress-bar-completed');

                        // Add colour class based on progress percentage
                        if (progressPercentage < 25) {
                            progressBar.classList.add('progress-bar-low');
                        } else if (progressPercentage < 50) {
                            progressBar.classList.add('progress-bar-medium');
                        } else if (progressPercentage < 75) {
                            progressBar.classList.add('progress-bar-high');
                        } else if (progressPercentage < 100) {
                            progressBar.classList.add('progress-bar-very-high');
                        }
                    }

                    const elapsedTimeElem = game.querySelector('.game-status');
                    if (elapsedTimeElem) {
                        const statusText = progressPercentage >= 100 ? 'Completed' : `${progressPercentage.toFixed(2)}% Completed`;
                        elapsedTimeElem.textContent = `Elapsed Time: ${roundedElapsedMinutes} minutes | Status: ${statusText}`;
                    }

                    const gameMessageElem = game.querySelector('.game-message');
                    if (gameMessageElem) {
                        if (progressPercentage < 25) {
                            gameMessageElem.textContent = "Come on, don't give up!";
                        } else if (progressPercentage < 50) {
                            gameMessageElem.textContent = "Soon to get a reward!";
                        } else if (progressPercentage < 75) {
                            gameMessageElem.textContent = "Almost there!";
                        } else if (progressPercentage < 100) {
                            gameMessageElem.textContent = "Don't stop now!";
                        } else {
                            gameMessageElem.textContent = "Completed!";
                        }
                    }

                    // Move games with 100% progress to the completed section
                    if (progressPercentage === 100) {
                        // Remove game details except for the title
                        const completedGame = game.cloneNode(true);
                        completedGame.querySelector('.progress').remove();
                        completedGame.querySelector('.game-details').remove();

                        completedActivities.appendChild(completedGame);
                        game.remove();

                        // Add achievement badges from server side
                        const badge = document.createElement('div');
                        badge.classList.add('badge');
                        badge.innerHTML = `
                            <img src="${completedGame.querySelector('.game-title').innerText}">
                            <p>Completed ${completedGame.querySelector('.game-title').innerText}</p>
                        `;
                        achievementsSection.appendChild(badge);
                    } else if (progressPercentage === 0) {
                        // Hide games with 0% progress
                        game.style.display = 'none';
                    }
                });

                // Display total times
                document.getElementById('mind-time').textContent = `Mind Games: ${totalTimes.mind.toFixed(2)} minutes`;
                document.getElementById('relaxation-time').textContent = `Relaxation Games: ${totalTimes.relaxation.toFixed(2)} minutes`;
                document.getElementById('educational-time').textContent = `Educational Games: ${totalTimes.educational.toFixed(2)} minutes`;

                // Render the pie chart
                renderPieChart(totalTimes);
            }

            function renderPieChart(totalTimes) {
                const total = totalTimes.mind + totalTimes.relaxation + totalTimes.educational;

                const ctx = document.getElementById('totalTimeChart').getContext('2d');
                const data = {
                    labels: [
                        'Mind Games',
                        'Relaxation Games',
                        'Educational Games'
                    ],
                    datasets: [{
                        label: 'Total Time Spent (minutes)',
                        data: [totalTimes.mind.toFixed(2), totalTimes.relaxation.toFixed(2), totalTimes.educational.toFixed(2)],
                        backgroundColor: ['#ff6384', '#36a2eb', '#cc65fe'],
                        hoverOffset: 4
                    }]
                };

                const config = {
                    type: 'pie',
                    data: data,
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                text: 'Find Out Where You Spent The Most/Least Time'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const total = context.dataset.data.reduce((sum, value) => sum + parseFloat(value), 0);
                                        const percentage = ((context.raw / total) * 100).toFixed(2);
                                        // To allow percentage data to show up in tooltip
                                        return `${context.label}: ${context.raw} minutes (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                };

                new Chart(ctx, config);
            }
        });

        document.addEventListener('DOMContentLoaded', function() {
            const deleteIcons = document.querySelectorAll('.delete-goal');

            deleteIcons.forEach(icon => {
                icon.addEventListener('click', function() {
                    const goalIndex = this.getAttribute('data-index');

                    if (confirm('Are you sure you want to delete this goal?')) {
                        fetch('/delete-goal', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ goalIndex: goalIndex }),
                        })
                        .then(response => {
                            if (response.ok) {
                                location.reload(); // Refresh the page to show updated goals
                            } else {
                                alert('Failed to delete goal. Please try again.');
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            alert('Failed to delete goal. Please try again.');
                        });
                    }
                });
            });
        });
    </script>
</body>
</html>
