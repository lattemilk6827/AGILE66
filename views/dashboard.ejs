<!DOCTYPE html>
<html>
<head>
    <title>Dashboard</title>
    <link rel="stylesheet" href="/main.css">
    <link rel="stylesheet" href="/dashboardpage.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>
    <!-- React component scripts added to aid in pie chart rendering -->
    <!-- https://react.dev/learn/editor-setup
    https://legacy.reactjs.org/docs/cdn-links.html -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://unpkg.com/react@17/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@17/umd/react-dom.production.min.js"></script>
    <!-- calling pie chart coded script -->
    <script src="/progressTracker/pieChart.js"></script>

</head>

<body class="dashboard-page">
    <%- include('../utils/header') %>

    <div class="welcome-section">
        <h1>Welcome, <%= userName %>!</h1>
        <button onclick="location.href='/edit-profile'">Edit Profile</button>
    </div>

    <div class="completed-section">
        <h2 class="section-header" style="font-family: 'Yaelah';">You Have Completed These Activities</h2>
        <div id="completedActivities"></div>
    </div>

    <div class="achievements-section">
        <h2 class="section-header" style="font-family: 'Yaelah';">Achievements</h2>
        <div class="badges" id="achievements"></div>
    </div>
    

    <div class="progress-section">
        <h2 class="section-header" style="font-family: 'Yaelah';">Games Progress</h2>
        <p class="click-to-go-text">Click on each game below to progress:</p>
        <div id="gamesProgress">
            <% if (games && games.length > 0) { %>
                <% games.forEach(function(game) { %>
                    <!-- Redirect each unfinished game to its respective game page -->
                    <a href="/games/play/<%= game.id %>" class="game-link">
                        <div class="game" data-game-id="<%= game.id %>" data-game-section="<%= game.section %>">
                            <div class="game-title"><%= game.title %></div>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" aria-valuenow="<%= game.progress_percentage %>" aria-valuemin="0" aria-valuemax="100">
                                    <%= game.progress_percentage %>%
                                </div>
                            </div>
                            <div class="game-details">
                                <div class="game-status">Elapsed Time: <%= game.elapsed_minutes %> minutes | Status: <%= game.progress_percentage >= 100 ? 'Completed' : game.progress_percentage.toFixed(2) + '% Completed' %></div>
                                <div class="game-message"><%= game.progress_message %></div>
                            </div>
                        </div>
                    </a>
                <% }); %>
            <% } else { %>
                <p>No games available.</p>
            <% } %>
        </div>
    </div>

    <div class="total-time-section">
        <div class="row">
            <div class="col-md-6">
                <h2 class="section-header" style="font-family: 'Yaelah';">Total Time Spent on Each Section</h2>
                <div class="section-time">
                    <p id="mind-time">Mind Games: 0 minutes</p>
                    <p id="relaxation-time">Relaxation Games: 0 minutes</p>
                    <p id="educational-time">Educational Games: 0 minutes</p>
                </div>
            </div>
            <!-- Pie chart rendering -->
            <div class="col-md-6">
                <div class="canvas-wrapper">
                    <div id="reactPieChart"></div>
                </div>
            </div>
        </div>
    </div>

    <div class="goals-section">
        <h2 class="section-header" style="font-family: 'Yaelah';">My Goals</h2>
    
        <!-- Add more goals form -->
        <form action="/add-more-goals" method="post" class="add-more-goals-form mb-3">
            <input type="text" name="newGoal" placeholder="Enter new goal...">
            <button type="submit" class="add-goal-btn">Add Above</button>
        </form>
      
        <!-- Display the current goals in a column -->
        <% if (goalsText && goalsText.trim().length > 0) { %>
            <div class="goals-display mb-3">
                <p><strong>Current Goals:</strong></p>
                <ul>
                    <% const goalsArray = goalsText.split("\n"); %>
                    <% goalsArray.forEach((goal, index) => { %>
                        <li class="goal-item">
                            <span class="goal-text"><%= goal %></span>
                            <!-- Allow deletion of updated goals from database  -->
                            <form action="/delete-goal" method="post" style="display:inline;">
                                <input type="hidden" name="goalIndex" value="<%= index %>">
                                <button type="submit" class="delete-goal-btn" title="Delete Goal">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </form>
                        </li>
                    <% }); %>
                </ul>
            </div>
        <% } else { %>
            <p>No goals set yet.</p>
        <% } %>
    </div>

    <%- include('../utils/footer') %>
            <script>
        // Allow DOM to be fully loaded before executing script
        document.addEventListener('DOMContentLoaded', function() {
            // Fetch the rewards JSON file and then update the game progress
            fetch('/rewards.json')  
                .then(response => response.json())  
                .then(data => {
                    // Extracting the array of reward images from JSON
                    const rewardImages = data.rewards; 

                    // Function to get a random reward image from the JSON data
                    function getRandomRewardImage() {
                        return rewardImages[Math.floor(Math.random() * rewardImages.length)];
                    }

                    // Call the function to update the game progress, passing in the random image function
                    updateGameProgress(getRandomRewardImage);
                });

            // Function to update the game progress based on elapsed time and user interaction
            function updateGameProgress(getRandomRewardImage) {
                // Select all game elements on the page
                const games = document.querySelectorAll('.game'); 
                // Get the container for completed activities
                const completedActivities = document.getElementById('completedActivities'); 
                // Get the container for achievement badges
                const achievementsSection = document.getElementById('achievements');

                // Object to store the total time spent on each game category
                const totalTimes = {
                    mind: 0,
                    relaxation: 0,
                    educational: 0
                };

                // Loop through each game to update its progress and manage UI elements
                games.forEach((game) => {
                    // Get the unique game ID
                    const gameId = game.getAttribute('data-game-id'); 
                    // Get the game section (category) it belongs to (e.g., mind, relaxation, educational)
                    const gameSection = game.getAttribute('data-game-section'); 
                    // Unique user identifier passed from the server-side template
                    const userId = '<%= userName %>';
                    // Retrieve the elapsed minutes for this game and user from localStorage
                    const elapsedMinutes = parseFloat(localStorage.getItem(`elapsedMinutes_${gameId}_${userId}`)) || 0; 
                    // Round the elapsed minutes to 2 decimal places
                    const roundedElapsedMinutes = elapsedMinutes.toFixed(2); 
                    // Calculate the progress percentage (based on 15 minutes for full completion)
                    const progressPercentage = Math.min((elapsedMinutes / 15) * 100, 100);

                    // Add the elapsed minutes to the total time for the respective game section
                    if (totalTimes[gameSection] !== undefined) {
                        totalTimes[gameSection] += elapsedMinutes;
                    }

                    // Update the progress bar for the game
                    const progressBar = game.querySelector('.progress-bar');
                    if (progressBar) {
                        // Set the progress bar width and text content based on progress percentage
                        progressBar.setAttribute('aria-valuenow', progressPercentage);
                        progressBar.style.width = `${progressPercentage}%`;
                        progressBar.textContent = `${progressPercentage.toFixed(2)}%`;

                        // Remove any existing progress bar color classes to avoid overlap for custom colour classes
                        progressBar.classList.remove('progress-bar-low', 'progress-bar-medium', 'progress-bar-high', 'progress-bar-very-high', 'progress-bar-completed');

                        // Adding colour class based on progress percentage for visual indication based on user progress on games
                        if (progressPercentage < 25) {
                            progressBar.classList.add('progress-bar-low');
                        } else if (progressPercentage < 50) {
                            progressBar.classList.add('progress-bar-medium');
                        } else if (progressPercentage < 75) {
                            progressBar.classList.add('progress-bar-high');
                        } else if (progressPercentage < 100) {
                            progressBar.classList.add('progress-bar-very-high');
                        }
                    }

                    // Update the status text  time taken and completion status for the game
                    const elapsedTimeElem = game.querySelector('.game-status');
                    if (elapsedTimeElem) {
                        const statusText = progressPercentage >= 100 ? 'Completed' : `${progressPercentage.toFixed(2)}% Completed`;
                        elapsedTimeElem.textContent = `Elapsed Time: ${roundedElapsedMinutes} minutes | Status: ${statusText}`;
                    }

                    // Update the motivational message based on progress percentage
                    const gameMessageElem = game.querySelector('.game-message');
                    if (gameMessageElem) {
                        if (progressPercentage < 25) {
                            gameMessageElem.textContent = "Come on, don't give up!";
                        } else if (progressPercentage < 50) {
                            gameMessageElem.textContent = "Soon to get a reward!";
                        } else if (progressPercentage < 75) {
                            gameMessageElem.textContent = "Almost there!";
                        } else if (progressPercentage < 100) {
                            gameMessageElem.textContent = "Don't stop now!";
                        } else {
                            gameMessageElem.textContent = "Completed!";
                        }
                    }

                    // If the game is fully completed (100% progress)
                    if (progressPercentage === 100) {
                        // Clone the game element and remove the progress and details sections
                        const completedGame = game.cloneNode(true);
                        completedGame.querySelector('.progress').remove();
                        completedGame.querySelector('.game-details').remove();
                        // Move the completed game to the completed activities section
                        completedActivities.appendChild(completedGame);
                        // Remove the game from the main list
                        game.remove();

                        // Get a random reward image using the function passed in from the JSON data
                        const randomImage = getRandomRewardImage(); 

                        // Get the title of the completed game
                        const gameTitle = completedGame.querySelector('.game-title').innerText;

                        // Create a new reward for the achievement
                        const badge = document.createElement('div');
                        badge.classList.add('badge');
                        badge.innerHTML = `
                            <img src="${randomImage}" alt="Reward for ${gameTitle}">
                        `;
                        // Add the badge to the achievements section
                        achievementsSection.appendChild(badge);
                    } else if (progressPercentage === 0) {
                        // Hide games with 0% progress from the list
                        game.style.display = 'none';
                    }
                });

                // Update the total time spent on each game section
                document.getElementById('mind-time').textContent = `Mind Games: ${totalTimes.mind.toFixed(2)} minutes`;
                document.getElementById('relaxation-time').textContent = `Relaxation Games: ${totalTimes.relaxation.toFixed(2)} minutes`;
                document.getElementById('educational-time').textContent = `Educational Games: ${totalTimes.educational.toFixed(2)} minutes`;

                // Render the pie chart with React component
                ReactDOM.render(
                    React.createElement(PieChartComponent, { data: totalTimes }),
                    document.getElementById('reactPieChart')
                );
            }
        });

     </script>
    
</body>
</html>
