<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cloud Gazer</title>
    <link rel="stylesheet" href="/main.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"></script>
    <style>
        body, html {
            height: 100%;
            margin: 0;
            background: #87CEEB; 
            overflow: hidden;
        }
        #cloudCanvas {
            width: 100%;
            height: 100%;
            display: block;
        }
        #score {
            position: absolute;
            top: 20px;
            left: 20px;
            font-size: 24px;
            color: white;
        }
        .progress-container {
            position: absolute;
            bottom: 20px;
            width: 90%;
            left: 50%;
            transform: translateX(-50%);
        }
        #time-remaining {
            color: white;
        }
    </style>
</head>
<body>
    <canvas id="cloudCanvas"></canvas>
    <div id="score">Score: 0</div>
    <div class="progress-container">
        <div class="progress">
            <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
        </div>
        <p id="time-remaining">Time remaining: 15 minutes 0 seconds</p>
        <button class="btn btn-secondary mt-3" onclick="window.location.href='/games'">Back to Games</button>
    </div>
    <script src="/progressTracker/progress.js"></script>
    <script>
        const canvas = document.getElementById('cloudCanvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        const clouds = []; // Array to store cloud data
        let score = 0;
        let cloudSpeed = 1;
        let cloudSize = 0.5;
        let cloudInterval;

        function drawCloud(cloud) {
            ctx.beginPath();
            ctx.fillStyle = 'white';
            ctx.arc(cloud.x, cloud.y, 30 * cloudSize, Math.PI * 0.5, Math.PI * 1.5);
            ctx.arc(cloud.x + 35 * cloudSize, cloud.y - 30 * cloudSize, 35 * cloudSize, Math.PI * 1, Math.PI * 1.85);
            ctx.arc(cloud.x + 76 * cloudSize, cloud.y - 22.5 * cloudSize, 25 * cloudSize, Math.PI * 1.37, Math.PI * 1.91);
            ctx.arc(cloud.x + 100 * cloudSize, cloud.y, 30 * cloudSize, Math.PI * 1.5, Math.PI * 0.5);
            ctx.fill();
        }

        function addCloud() {
            const x = -200; // Start clouds off screen
            const y = Math.random() * (canvas.height / 2);
            clouds.push({x, y});
        }

        function moveClouds() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            clouds.forEach((cloud, index) => {
                cloud.x += cloudSpeed; // Cloud speed
                drawCloud(cloud);
                if (cloud.x > canvas.width + 200) {
                    clouds.splice(index, 1); // Remove cloud that moves off screen
                }
            });
        }

        function increaseSpeed() {
            cloudSpeed *= 1.5; // Increase cloud speed exponentially
            cloudSize *= 1; // Increase cloud size
        }

        canvas.addEventListener('click', (event) => {
            const rect = canvas.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;

            clouds.forEach((cloud, index) => {
                ctx.beginPath();
                ctx.arc(cloud.x, cloud.y, 30 * cloudSize, Math.PI * 0.5, Math.PI * 1.5);
                ctx.arc(cloud.x + 35 * cloudSize, cloud.y - 30 * cloudSize, 35 * cloudSize, Math.PI * 1, Math.PI * 1.85);
                ctx.arc(cloud.x + 76 * cloudSize, cloud.y - 22.5 * cloudSize, 25 * cloudSize, Math.PI * 1.37, Math.PI * 1.91);
                ctx.arc(cloud.x + 100 * cloudSize, cloud.y, 30 * cloudSize, Math.PI * 1.5, Math.PI * 0.5);

                if (ctx.isPointInPath(x, y)) {
                    clouds.splice(index, 1); // Remove clicked cloud
                    score++;
                    document.getElementById('score').innerText = `Score: ${score}`;
                }
            });
        });

        // Add clouds every 2 seconds
        setInterval(addCloud, 2000);
        // Move and redraw clouds every 20 milliseconds
        cloudInterval = setInterval(moveClouds, 20);
        // Increase cloud speed and size every 5 seconds
        setInterval(increaseSpeed, 5000);
    </script>
</body>
</html>

